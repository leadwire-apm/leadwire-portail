<?php declare(strict_types=1);

namespace {{ namespace }}\Document;

{% block use_statements %}
use Doctrine\ODM\MongoDB\Mapping\Annotations as ODM;
use JMS\Serializer\Annotation as JMS;
use ATS\CoreBundle\Annotation as ATS;
{% if usesArrayCollection == true %}
use Doctrine\Common\Collections\ArrayCollection;
{% endif %}
{% for field in fields %}
{% if field['basicType'] == false %}
use {{ field['type'] }};
{% endif %}
{% endfor %}
{% endblock use_statements %}

{% block class_definition %}
/**
 * @ODM\Document(repositoryClass="{{ namespace }}\Repository\{{ document }}Repository")
 * @ODM\HasLifecycleCallbacks
 * @ODM\ChangeTrackingPolicy("DEFERRED_EXPLICIT")
 * @JMS\ExclusionPolicy("all")
 * @ATS\ApplicationView
 */
class {{ document }}
{% endblock class_definition %}
{
{% block class_body %}
    /**
     * @var \MongoId
     *
     * @ODM\Id("strategy=auto")
     * @JMS\Type("string")
     * @JMS\Expose
     */
    private $id;

{% for field in fields %}
    /**
{% if field['basicType'] == true %}
     * @var {{ field['type'] }}
     *
     * @ODM\Field(type="{{ field['mongoType'] }}", name="{{ field['fieldName'] }}")
     * @JMS\Type("{{ field['jmsType'] }}")
{% else %}
{% if field['associationMany'] == true %}
     * @var Collection<{{ field['type'] | split('\\') | last }}>
{% else %}
     * @var {{ field['type'] | split('\\') | last }}
{% endif %}
     *
     * @ODM\{{ field['associationType'] }}(targetDocument="{{ field['mongoType'] }}", name="{{ field['fieldName'] }}")
{% if field['associationMany'] == true %}
     * @JMS\Type("array<{{ field['jmsType'] }}>")
{% else %}
     * @JMS\Type("{{ field['jmsType'] }}")
{% endif %}
{% endif %}
     * @JMS\Expose
     * @JMS\Groups({})
     */
    private ${{ field['fieldName'] }};

{% endfor %}

    /**
     * Constructor
     */
    public function __construct()
    {
        // auto-generated stub
{% for field in fields %}
{% if field['associationMany'] == true %}
        $this->{{ field['fieldName']  }} = new ArrayCollection();
{% endif %}
{% endfor %}
    }

    /**
     * Get id
     *
     * @return \MongoId
     */
    public function getId()
    {
        return $this->id;
    }

{% for field in fields %}
    /**
     * Get {{ field['fieldName']  }}
     *
{% if field['basicType'] == true %}
     * @return {{ field['type'] }}
{% else %}
     * @return {{ field['type'] | split('\\') | last }}
{% endif %}
     */
    public function get{{ field['fieldName'] | ucfirst }}()
    {
        return $this->{{ field['fieldName'] }};
    }

    /**
     * Set {{ field['fieldName'] }}
{% if field['basicType'] == true %}
     * @param {{ field['type'] }}
     *
     * @return {{ document }}
     */
    public function set{{ field['fieldName'] | ucfirst }}(${{ field['fieldName'] }})
{% else %}
{% if field['associationMany'] == true %}
     * @param ArrayCollection {{ field['type'] | split('\\') | last }}
     *
     * @return {{ document }}
     */
    public function set{{ field['fieldName'] | ucfirst }}(array ${{ field['fieldName'] }})
{% else %}
     * @param {{ field['type'] | split('\\') | last }}
     *
     * @return {{ document }}
     */
    public function set{{ field['fieldName'] | ucfirst }}({{ field['type'] | split('\\') | last }} ${{ field['fieldName'] }})
{% endif %}
{% endif %}
    {
{% if field['associationMany'] == true %}
        $this->{{ field['fieldName'] }} = new ArrayCollection(${{ field['fieldName'] }});
{% else %}
        $this->{{ field['fieldName'] }} = ${{ field['fieldName'] }};
{% endif %}
        return $this;
    }

{% if field['associationMany'] == true %}
    public function add{{ field['fieldName'][:1] |upper ~ field['fieldName'][1:field['fieldName'] | length -2] }}({{ field['type'] | split('\\') | last }} ${{ field['fieldName'][:field['fieldName'] | length -1] }})
    {
        if (!$this->{{ field['fieldName'] }}->contains(${{ field['fieldName'][:field['fieldName'] | length -1] }})) {
            $this->{{ field['fieldName'] }}[] = ${{ field['fieldName'][:field['fieldName'] | length -1] }};
        }

        return $this;
    }

    public function remove{{ field['fieldName'][:1] |upper ~ field['fieldName'][1:field['fieldName'] | length -2] }}({{ field['type'] | split('\\') | last }} ${{ field['fieldName'][:field['fieldName'] | length -1] }})
    {
        $this->{{ field['fieldName'] }}->removeElement(${{ field['fieldName'][:field['fieldName'] | length -1] }});

        return $this;
    }
{% endif %}
{% endfor %}
    /**
     * Returns string representation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->id;
    }
{% endblock class_body %}
}
